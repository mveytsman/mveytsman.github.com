<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Ontoillogical]]></title>
  <link href="http://blog.ontoillogical.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://blog.ontoillogical.com/"/>
  <updated>2014-10-18T19:58:41-04:00</updated>
  <id>http://blog.ontoillogical.com/</id>
  <author>
    <name><![CDATA[Max Veytsman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to take over the computer of any Java (or Clojure or Scala) developer]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/"/>
    <updated>2014-07-28T14:12:48-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer</id>
    <content type="html"><![CDATA[<p><strong>Update: 07/31/2014</strong></p>

<p>Sonatype has reacted to this post and will soon be turning on SSL access for all users. Their blog post announcing this is <a href="http://blog.sonatype.com/2014/07/ssl_connectivity_for_central/">here</a>. I’m very happy that they are making this change, and the Java ecosystem is going to be more secure for it!</p>

<p>That being said, if you’re reading this and are thinking of charging $10 to gauge the true demand for security features in your product, don’t. Imagine if car companies decided to charge $10 to gauge the true demand for air bags. Luckily, we live in a world where car companies can’t legally do that.</p>

<p>I’m happy that Sonatype made this change in their policy, and I hope they continue to <em>decrease</em> friction for security features in their products. It’s our responsibility as developers to make the most secure product we can for our users. How much friction they are willing to endure for a security feature shouldn’t factor into it. </p>

<hr />

<p>The other day I started hacking on a Clojure project of mine, when I saw my firewall display this:</p>

<p><img src="/assets/images/dilettante/firewall.png" width="500"></p>

<p>I’m downloading clojure.jar from <a href="http://repo.maven.apache.org">http//repo.maven.apache.org</a> over port 80! This means that I’m going to be downloading JARs over unencrypted http. I thought this was an <a href="https://github.com/technomancy/leiningen/issues/1604">issue</a> with <a href="http://leiningen.org/">leiningen</a> at first. As it turns out it’s not lein’s fault at all. Clojure.jar, and a whole lot of other JARs that are important in the Java/Clojure/Scala/etc world are officially hosted on <a href="http://search.maven.org/">Maven Central</a>, which is a public service provided by <a href="http://www.sonatype.com/">Sonatype</a>. Sonatype has a policy that they only allow SSL access to people who have authentication tokens. <strong>In order to get an authentication token and SSL access, you need to donate $10 to the Apache foundation.</strong> If you don’t believe me, the donate page is <a href="http://www.sonatype.com/clm/secure-access-to-central">here</a>, and the blog post announcing this policy is <a href="http://www.sonatype.com/clm/secure-access-to-central">here</a>. They even mention man-in-the-middle attacks on it.</p>

<p>Because authentication tokens are issued per user/organization, tools like maven and leiningen can’t bundle authentication tokens. If you’re pulling down some Java project and installing its dependencies, you’re not going over SSL. This policy was confirmed by a Sonatype employee when I got into a twitter tiff about this:</p>

<p><img src="/assets/images/dilettante/tweet.png" width="500"></p>

<p>Unless you take very careful steps that involve paying someone $10, JARs you download can be man-in-the-middled, and code you execute on your system can be replaced by malware.</p>

<p>When can this happen? If you ever use a public wifi network in a coffee shop, or are on a wifi network that someone <a href="https://ettercap.github.io/ettercap/">took over</a> you can be man-in-the-middled. Your ISP can man-in-the-middle you at will, and some do so in order to serve you ads. Or, perhaps you are subject to a man-in-the-middle attack from a <a href="http://www.renesys.com/2013/11/mitm-internet-hijacking/">state actor</a>.</p>

<h2 id="dilettante">Dilettante</h2>

<p>To prove how easy this is to do, I wrote <a href="https://github.com/mveytsman/dilettante">dilettante</a>, a man-in-the-middle proxy that intercepts JARs from maven central and injects malicious code into them.</p>

<p>Proxying HTTP traffic through dilettante will backdoor any JARs downloaded from maven central. The backdoored version will retain their functionality, but display a nice message to the user when they use the library. You can see the video below:</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://blog.ontoillogical.com/assets/files/dilettante_screencast.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Or a screenshot:</p>

<p><img src="/assets/images/dilettante/screen.png" width="800"></p>

<p>You can find the code <a href="https://github.com/mveytsman/dilettante">here</a></p>

<h2 id="the-technical-details">The Technical Details</h2>

<p>When JARs are downloaded from Maven Central, they go over HTTP, so a man in the middle proxy can replace them at will. It’s possible to sign jars, but in my experimentation with standard tools, these signatures aren’t checked. The only other verification is a SHA1 sum, which is also sent over HTTP. When dilettante sees a JAR coming from Maven Central it replaces the original JAR with a backdoored version that runs malicious code on the victim’s computer. Since the SHA1 hashes are sent over HTTP only, dilettante simply replaces any hashes it sees with the hash of the corresponding backdoored JAR.</p>

<p>I used the excellent <a href="http://mitmproxy.org/">mitmproxy</a> library to build my tool. I started by writing an <a href="http://mitmproxy.org/doc/scripting/inlinescripts.html">inline script</a> for the proxy and then moved on to creating a standalone tool with <a href="http://mitmproxy.org/doc/scripting/libmproxy.html">libmproxy</a>.</p>

<p>A JAR is just a zip file that contains Java Class files, resources and some metadata. To backdoor a JAR, I can insert my own class by adding it to the zip archive:</p>

<p>&#8220;`java
package dilettante;</p>

<p>public class Dilettante {
    public static void() {
        // do some evil stuff
    }
}
&#8220;`
The trick is finding a way to call my malicious class. I know that my victim will be downloading some library, and I need to run my malicious code regardless of what classes in the library they actually use. I would also like to actual functionality of the library to not be affected.</p>

<p>Java has the concept of static class blocks, which are class level initializers — that is, they contain code that is run once when the class (not an instance!) is loaded into memory. After I insert a malicious class file into the jar, I can call it in a static block like this:</p>

<p><code>java
import dilettante.*;
static {
    Dilettante.backdoor();
}
</code></p>

<p>In order to inject the above snippet, I need to inject it into Java classes directly, not source files. I use <a href="https://github.com/Storyyeller/Krakatau">Krakatau</a>, a Java disassembler/assembler library for Python. It let’s me add the snippet in <a href="http://jasmin.sourceforge.net/">Jasmin</a> format:</p>

<p><code>
.method static &lt;clinit&gt; : ()V
  ; method code size: 4 bytes
  .limit stack 0
  .limit locals 0
  invokestatic dilettante/Dilettante backdoor ()V
  return
.end method
</code></p>

<h2 id="limitations">Limitations</h2>
<p>This is a proof of concept!, and so it still has some limitations</p>

<ol>
  <li>
    <p>Currently it’s not very fast. There are a couple of reasons for this</p>

    <ul>
      <li>I have to run a disassemble and an assemble step. It would be more efficient to directly append the assembled shim to the .class file.</li>
      <li>The way I am using Python’s zipfile library, I’m actually creating a second copy of every class in the zip. This is inefficient in terms of space and speed. Careful reading of the zip spec may lead to an efficient way of appending data to files inside a zip.</li>
    </ul>
  </li>
  <li>
    <p>If a user is downloading multiple JARs in one go, we will backdoor each one. The malicious payload is executed only once per JAR, but if multiple JARs are backdoored, we will execute it several times. This issue will disappear if we replace the cat picture with a high quality persistent backdoor that is smart enough to only infect a system once :).</p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to locate any Tinder user]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/02/25/how-to-locate-any-tinder-user/"/>
    <updated>2014-02-25T10:09:00-05:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/02/25/how-to-locate-any-tinder-user</id>
    <content type="html"><![CDATA[<p><strong>You can also find this post on my consultancy’s blog <a href="http://finite.state.io/blog/2014/02/25/how-to-locate-any-tinder-user/">here</a></strong></p>

<p>Last fall, while performing some bespoke security research for one of our clients, I found a way to locate any Tinder user using <a href="https://en.wikipedia.org/wiki/Trilateration">trilateration</a>. Here’s what the proof of concept looks like:</p>

<p><img src="/assets/images/tinder/04_found_max.png" alt="finding me" /></p>

<p>I did a guest post over at the Include Security blog about <strong><a href="http://blog.includesecurity.com/2014/02/how-i-was-able-to-track-location-of-any.html">how I was able to track the location of any Tinder user</a></strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts On Bsidesto]]></title>
    <link href="http://blog.ontoillogical.com/blog/2013/11/30/thoughts-on-bsidesto/"/>
    <updated>2013-11-30T12:00:00-05:00</updated>
    <id>http://blog.ontoillogical.com/blog/2013/11/30/thoughts-on-bsidesto</id>
    <content type="html"><![CDATA[<p>** You can also find this post on my consultancy’s blog <a href="http://finite.state.io/blog/2013/11/30/thoughts-on-bsidesto/">here</a> **</p>

<p>Last month, I helped organize a security conference in Toronto called <a href="http://bsidesto.ca">BsidesTO</a>. I’ve attended and volunteered at my fair share of conferences, but this is the first time I’ve had an integral role in throwing and event of this scale. </p>

<p>One day, two floors, 14 speakers, and over 150 attendees. It was a blast. An exhausting blast.</p>

<p><a href="http://www.securitybsides.com/w/page/12194156/FrontPage">Bsides</a>. is a brand for security conferences around the world. </p>

<blockquote>
  <p>What is BSides?
Each BSides is a community-driven framework for building events for and by information security community members.  The goal is to expand the spectrum of conversation beyond the traditional confines of space and time.  It creates opportunities for individuals to both present and participate in an intimate atmosphere that encourages collaboration. It is an intense event with discussions, demos, and interaction from participants. It is where conversations for the next-big-thing are happening. </p>
</blockquote>

<p>The Toronto security community had long wanted a Bsides of its own to compliment the larger <a href="http://sector.ca/">SecTor</a> conference. 2013 was the first year that things came together and a successful Bsides in Toronto was launched. </p>

<h2 id="if-you-build-it-they-will-come">If you build it they will come</h2>
<p>Conferences without speakers are just parties. Which isn’t a bad thing, but we’re throwing a conference damnit! To be a conference, someone has to talk.</p>

<p>At first, getting enough speakers concerned me the most. Having spoken at conferences before, I know how harrowing it can be to put yourself out there in front of a crowd. Because we were starting a brand new event, I was constantly anxious that no one would want to speak, thus forcing me to spend 6 hours performing magic tricks to entertain the attendees.</p>

<p>This worry was entirely unfounded. I had no idea how many smart talented people are willing to show up to a hitherto unknown event with their research and perspectives. </p>

<p>We had an amazing group of speakers show up, and I’m proud of all of them for making the conference the success that it was.  </p>

<h2 id="the-other-kind-of-speakers-matter-too">The other kind of speakers matter too</h2>
<p>No matter how much you plan ahead, something will go wrong. </p>

<p>We ran the conference on two floors of the Monarch Tavern. We piped audio and video from the talks to televisions upstairs, so people could have a lounge like atmosphere while they watched the talks.</p>

<p>I still think the model was solid. The “Hallway Track” is always a great experience at conferences. We wanted to create an atmosphere where you could converse with your friends while still paying attention to talks and not bothering other attendees.</p>

<p>There were some issues with the audio quality upstairs, and my main lesson learned for next year is to improve the A/V experience as much as possible.</p>

<h2 id="sleep">Sleep</h2>
<p>Sleep is important. BsidesTO happened to be on the night of Nuit Blanche. If you went out that night, I’m impressed. I for one went home and slept for 36 hours.</p>

<h2 id="in-conclusion">In conclusion</h2>
<p>Organizing BSidesTO was one of the best experiences I’ve had in 2013, and I hope you had a good time at the conference as well. My eternal thanks to everyone else involved: <a href="https://twitter.com/bitgamble">Jamie</a>, <a href="https://twitter.com/gattaca">Dave</a>, <a href="https://twitter.com/ironfog">Ben</a>, <a href="https://twitter.com/phillmv">Phill</a>, <a href="https://twitter.com/syzygos">Laura</a>, and the staff of <a href="http://www.themonarchtavern.com/">The Monarch</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking Letterpress]]></title>
    <link href="http://blog.ontoillogical.com/blog/2012/11/09/hacking-letterpress/"/>
    <updated>2012-11-09T14:38:00-05:00</updated>
    <id>http://blog.ontoillogical.com/blog/2012/11/09/hacking-letterpress</id>
    <content type="html"><![CDATA[<p><strong>You can also find this post on my consultancy’s blog <a href="http://finite.state.io/blog/2012/11/09/hacking-letterpress/">here</a></strong></p>

<p><a href="http://www.atebits.com/letterpress/">Letterpress</a> is an iOS game
that came out a few weeks ago and immediately became popular enough to <a href="https://twitter.com/marcoarment/statuses/261337316268859392">take down Apple’s GameCenter</a>. It’s a cross between <a href="http://daringfireball.net/linked/2012/10/24/letterpress">Scrabble and Go</a>. The game is played on a board made out of 25 letters and players take turns building words in order to capture the letters they use. </p>

<p>I was hopelessly addicted to Letterpress until I figured out how to win consistently.</p>

<p><img src="/assets/images/letterpress/winning.png" alt="winning" /></p>

<p>As it turns out, letterpress’s dictionary is stored on the device. By simply adding words to Letterpress’s dictionary, you can register any
combination of letters as a valid word. </p>

<p>Inside your iPhone, the dictionary is spread across a
series of text files located in <code>/&lt;Letterpress
folder&gt;/Letterpress.app/o/[ab-zz].txt</code>. For instance, <code>ab.txt</code>
contains all the words that begin with aa, and so on and so forth.</p>

<p>However, digging around a bunch of text files is no fun, and so I decided to
write a tool to help me out.</p>

<p>By the way, the author of Letterpress does <a href="https://twitter.com/lorenb/status/261617107656138752">know</a> about people cheating this way. </p>

<h2 id="automating-letterpress-cheating">Automating Letterpress cheating</h2>

<p>First of all, it’s a common misconception that you need to jailbreak a
phone in order to access an individual app’s files. 
Tools like
<a href="http://www.macroplant.com/iexplorer/">iExplorer</a> allow you to, among
other things, access an app’s directory and modify the files there on any iPhone. (It’s my understanding that they’re using undocumented calls in the library iTunes uses for syncing in order to
pull this off.)</p>

<p>Since I didn’t want to rely on a commercial tool like iExplorer,
I decided to use <a href="http://www.libimobiledevice.org/">libimobiledevice</a>. Libimobiledevice
is an open-source library for talking to iDevices over USB. It’s capable of providing
access to the filesystem, the iPhone internals, and much more. 
Libimobiledevice supports both OS X and Linux.</p>

<p>I wrote a ruby gem that acts as an adapter for
libimobiledevice and exposes some of the API calls in an object-oriented way. It’s available on github as
<a href="https://github.com/stateio/imobiledevice">imobiledevice</a>. So far, I have
implemented only the small subset of libimobiledevice that I need,
but I definitely welcome pull requests.</p>

<p>Once I had a ruby wrapper for for libimobiledevice, it was simple to
write an app that adds arbitrary words to the Letterpress dictionary.
I call it
<a href="https://github.com/stateio/letterpress-lexicographer">letterpress-lexicographer</a>.
Here’s how it works:</p>

<h2 id="is-this-a-word">Is this a word?</h2>

<p><img src="/assets/images/letterpress/before.png" alt="Before" /></p>

<h2 id="shucks">Shucks!</h2>

<p><code>
./letterpress-lexicographer.rb
 [*] Connecting to iDevice
 [*] Connected to iDevice. UDID:REDACTED
 [*] Accessing Letterpress app
 [*] Accessed Letterpress app
 [?] What word would you like to add? (/q to quit)
  -&gt; szug
 [+] Reading word-list /Letterpress.app/o/sz.txt
 [+] Inserting word szug into word-list /Letterpress.app/o/sz.txt
 [+] Successfully added word szug.  You can play it now!
</code>
## Let’s try again
<img src="/assets/images/letterpress/after.png" alt="After" /></p>

<p>You can find the app <a href="https://github.com/stateio/letterpress-lexicographer">here</a>.  Please enjoy responsibly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking in and out of Vagrant]]></title>
    <link href="http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant/"/>
    <updated>2012-10-31T17:11:00-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2012/10/31/breaking-in-and-out-of-vagrant</id>
    <content type="html"><![CDATA[<p>**You can also find this post on my consultancy’s blog <a href="http://finite.state.io/blog/2012/10/30/breaking-in-and-out-of-vagrant/">here</a> **</p>

<p><a href="http://vagrantup.com/">Vagrant</a> is a great tool that allows you to
easily spawn and configure lightweight VMs to use as development
environments. Vagrant provides base installs of several flavours of
Linux, and takes care of setting up networking and shared folders for
you.  </p>

<p>Vagrant is really useful for managing your development environment,
and I highly recommend it. If you’re doing a lot of development,
you might need to be running all kinds of application and database
servers on your machine, and it’s probably a much better idea to run
them in a VM rather than on your host machine.  </p>

<p>Unfortunately, if you expose your Vagrant VMs (or any development VMs
really) to the outside world, what seemed like a secure best practice
can end up being very insecure. This isn’t a novel concept, but the
disposable nature of virtual machines makes it easy to forget to think
about their security. A common attitude is “What’s the worst that can
happen if someone gets on my development VM? I blow away and
re-generate this VM every half hour anyway, and aren’t VM escape bugs
rare and esoteric anyway?”  </p>

<p>I’m going to show a really simple way to break out of Vagrant VMs, but first,</p>

<h2 id="how-vagrant-is-used">How Vagrant is Used</h2>

<p>Vagrant VMs are designed to be lightweight and built per-project. The
VMs around a concept of “base boxes,” which are base installs of
various flavours of linux. You initialize a Vagrant VM from a base
box, and then can install your desired environment.</p>

<p>By default, Vagrant shares your project folder 
with the VM at <code>/vagrant/</code>. So, a usual workflow would be:</p>

<p><code>bash
host: $ cd /my/project/here/
host: $ #we're going to base our VM on an Ubuntu Lucid 32bit base box 
host: $ vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
host: $ vagrant init lucid32 
host: $ vagrant up
host: $ vagrant ssh
  vm: $ #now we are on the VM
  vm: $ cd /vagrant/
  vm: $ run_my_server
</code>
You can then edit the code on your host machine, and use the VM to run an applciation and database server.</p>

<h2 id="bridging-the-network">Bridging the Network</h2>

<p>Just like in any virtual machine, you can configure your Vagrant VMs’
networking to run in host-only mode or in bridged mode. In host-only
mode, a VM uses a virtual network adapter and is basically only
accessible from the host. In bridged mode, the VM bridges through the
network adapter of the host machine, and actually connects to the same
network as the host. So, for example, if you bridge a VM to a wifi
device, the VM will have a different IP address on the same wifi
network as the host. And of course, you’ll be able to access the VM
from other machines on the wifi network. In host-only mode, the VM is
not accessible from outside the host. As they say, NAT is the poor
man’s firewall.</p>

<p>The Vagrant
<a href="http://vagrantup.com/v1/docs/bridged_networking.html">documentation</a>
doesn’t mention any security risks of running development VMs in
bridged mode. There’s a promising alert box, but the contents are:</p>

<blockquote>
  <h4 id="not-all-networks-work">Not All Networks Work!</h4>
  <p>Some networks will not work properly with bridged networking. Specifically, I’ve found that hotel networks, airport networks, and generally public-shared networks have configurations in place such that bridging does not work.
You can tell if the bridged networking worked successfully by seeing if the virtual machine was able to get an IP address on the bridged adapter.</p>
</blockquote>

<p>The author doesn’t seem to see any intrinsic problem with running Vagrant VMs in hotels, airports, and coffee-shops outside of it sometimes not working.</p>

<h2 id="breaking-in">Breaking In</h2>

<p>So after scanning the airport wifi, you found someone running a
Vagrant VM in bridged mode. How do you get in? First of all, they are
most like likely doing some kind of development on it, so the VM is
probably running an app that’s not very secured. There’s also a good
chance that this VM is running a database and maybe CouchDB or Redis.
One of these is probably using guessable credentials (this is the
development environment after all), or the app itself might have an
exploitable bug.</p>

<p>All of the above sounds too hard. Remember the <code>vagrant ssh</code> command
above? Well, it has to get in somehow.  </p>

<p>On all of the VMs built from official base boxes, like <code>lucid32</code> the
credentials are <code>vagrant : vagrant</code>. The instructions for developers
building new base boxes actually say not to use password-based SSH
logins. Instead, anyone building a base box for public consumption is
using these <a href="https://github.com/mitchellh/vagrant/tree/master/keys/">SSH keys</a> for the
<code>vagrant</code> user.</p>

<p>Either way, any Vagrant VM built from a public base box (read: almost
all of them) is going to be accessible with either <code>vagrant : vagrant</code>
or the SSH keys above.</p>

<h2 id="breaking-out">Breaking Out</h2>

<p>Breaking into a development VM isn’t a big deal on it’s own,
especially since the vagrant workflow encourages blowing-away and
rebuilding the VM often. What you really want is code execution on the
host, and it’s going to be surprisingly easy to do that.</p>

<p>The Vagrant workflow encourages you to edit your code outside the VM.
That’s why Vagrant helpfully shares the project directory as
<code>/vagrant/</code> in the VM. It’s a safe assumption that anyone using
Vagrant for development is using some kind of version control, and if
that’s the case, they are probably going to be interacting with it on
the host machine (where they edit the code). This is how we’ll get
execution on the host.</p>

<p>For simplicity, I’m going to focus on Git, but this trick should work
for any other commonly used VCS. Hooks are little shell scripts that
run after you commit a certain action. For instance, a <code>post-commit</code>
hook is a shell script that git will execute every time a commit is
completed. Hooks are placed in <code>.git/hooks/HOOK-NAME</code>.</p>

<p>So if I get on a Vagrant VM and want to escape into the host, all I
have to do is create a post-commit hook. I simply put evil things in
<code>/vagrant/.git/hooks/post-commit</code> and wait for the user to commit some
code. Since the <code>/vagrant/</code> directory is mounted from the host, my
hook will persist even if the user destroys the VM.</p>

<p>If you liked this, you should follow me on <a href="https://twitter.com/mveytsman">twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
