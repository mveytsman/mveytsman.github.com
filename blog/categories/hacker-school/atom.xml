<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacker_school | Ontoillogical]]></title>
  <link href="http://blog.ontoillogical.com/blog/categories/hacker-school/atom.xml" rel="self"/>
  <link href="http://blog.ontoillogical.com/"/>
  <updated>2014-12-12T14:06:17-05:00</updated>
  <id>http://blog.ontoillogical.com/</id>
  <author>
    <name><![CDATA[Max Veytsman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to take over the computer of any Java (or Clojure or Scala) developer]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/"/>
    <updated>2014-07-28T14:12:48-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer</id>
    <content type="html"><![CDATA[<p><strong>Update: 07/31/2014</strong></p>

<p>Sonatype has reacted to this post and will soon be turning on SSL access for all users. Their blog post announcing this is <a href="http://blog.sonatype.com/2014/07/ssl_connectivity_for_central/">here</a>. I’m very happy that they are making this change, and the Java ecosystem is going to be more secure for it!</p>

<p>That being said, if you’re reading this and are thinking of charging $10 to gauge the true demand for security features in your product, don’t. Imagine if car companies decided to charge $10 to gauge the true demand for air bags. Luckily, we live in a world where car companies can’t legally do that.</p>

<p>I’m happy that Sonatype made this change in their policy, and I hope they continue to <em>decrease</em> friction for security features in their products. It’s our responsibility as developers to make the most secure product we can for our users. How much friction they are willing to endure for a security feature shouldn’t factor into it. </p>

<hr />

<p>The other day I started hacking on a Clojure project of mine, when I saw my firewall display this:</p>

<p><img src="/assets/images/dilettante/firewall.png" width="500"></p>

<p>I’m downloading clojure.jar from <a href="http://repo.maven.apache.org">http//repo.maven.apache.org</a> over port 80! This means that I’m going to be downloading JARs over unencrypted http. I thought this was an <a href="https://github.com/technomancy/leiningen/issues/1604">issue</a> with <a href="http://leiningen.org/">leiningen</a> at first. As it turns out it’s not lein’s fault at all. Clojure.jar, and a whole lot of other JARs that are important in the Java/Clojure/Scala/etc world are officially hosted on <a href="http://search.maven.org/">Maven Central</a>, which is a public service provided by <a href="http://www.sonatype.com/">Sonatype</a>. Sonatype has a policy that they only allow SSL access to people who have authentication tokens. <strong>In order to get an authentication token and SSL access, you need to donate $10 to the Apache foundation.</strong> If you don’t believe me, the donate page is <a href="http://www.sonatype.com/clm/secure-access-to-central">here</a>, and the blog post announcing this policy is <a href="http://www.sonatype.com/clm/secure-access-to-central">here</a>. They even mention man-in-the-middle attacks on it.</p>

<p>Because authentication tokens are issued per user/organization, tools like maven and leiningen can’t bundle authentication tokens. If you’re pulling down some Java project and installing its dependencies, you’re not going over SSL. This policy was confirmed by a Sonatype employee when I got into a twitter tiff about this:</p>

<p><img src="/assets/images/dilettante/tweet.png" width="500"></p>

<p>Unless you take very careful steps that involve paying someone $10, JARs you download can be man-in-the-middled, and code you execute on your system can be replaced by malware.</p>

<p>When can this happen? If you ever use a public wifi network in a coffee shop, or are on a wifi network that someone <a href="https://ettercap.github.io/ettercap/">took over</a> you can be man-in-the-middled. Your ISP can man-in-the-middle you at will, and some do so in order to serve you ads. Or, perhaps you are subject to a man-in-the-middle attack from a <a href="http://www.renesys.com/2013/11/mitm-internet-hijacking/">state actor</a>.</p>

<h2 id="dilettante">Dilettante</h2>

<p>To prove how easy this is to do, I wrote <a href="https://github.com/mveytsman/dilettante">dilettante</a>, a man-in-the-middle proxy that intercepts JARs from maven central and injects malicious code into them.</p>

<p>Proxying HTTP traffic through dilettante will backdoor any JARs downloaded from maven central. The backdoored version will retain their functionality, but display a nice message to the user when they use the library. You can see the video below:</p>

<p><video width='' height='' preload='none' controls poster=''><source src='http://blog.ontoillogical.com/assets/files/dilettante_screencast.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Or a screenshot:</p>

<p><img src="/assets/images/dilettante/screen.png" width="800"></p>

<p>You can find the code <a href="https://github.com/mveytsman/dilettante">here</a></p>

<h2 id="the-technical-details">The Technical Details</h2>

<p>When JARs are downloaded from Maven Central, they go over HTTP, so a man in the middle proxy can replace them at will. It’s possible to sign jars, but in my experimentation with standard tools, these signatures aren’t checked. The only other verification is a SHA1 sum, which is also sent over HTTP. When dilettante sees a JAR coming from Maven Central it replaces the original JAR with a backdoored version that runs malicious code on the victim’s computer. Since the SHA1 hashes are sent over HTTP only, dilettante simply replaces any hashes it sees with the hash of the corresponding backdoored JAR.</p>

<p>I used the excellent <a href="http://mitmproxy.org/">mitmproxy</a> library to build my tool. I started by writing an <a href="http://mitmproxy.org/doc/scripting/inlinescripts.html">inline script</a> for the proxy and then moved on to creating a standalone tool with <a href="http://mitmproxy.org/doc/scripting/libmproxy.html">libmproxy</a>.</p>

<p>A JAR is just a zip file that contains Java Class files, resources and some metadata. To backdoor a JAR, I can insert my own class by adding it to the zip archive:</p>

<p>&#8220;`java
package dilettante;</p>

<p>public class Dilettante {
    public static void() {
        // do some evil stuff
    }
}
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The trick is finding a way to call my malicious class. I know that my victim will be downloading some library, and I need to run my malicious code regardless of what classes in the library they actually use. I would also like to actual functionality of the library to not be affected.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Java has the concept of static class blocks, which are class level initializers — that is, they contain code that is run once when the class (not an instance!) is loaded into memory. After I insert a malicious class file into the jar, I can call it in a static block like this:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;java
</span><span class='line'>import dilettante.*;
</span><span class='line'>static {
</span><span class='line'>    Dilettante.backdoor();
</span><span class='line'>}
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;In order to inject the above snippet, I need to inject it into Java classes directly, not source files. I use &lt;a href="https://github.com/Storyyeller/Krakatau"&gt;Krakatau&lt;/a&gt;, a Java disassembler/assembler library for Python. It let’s me add the snippet in &lt;a href="http://jasmin.sourceforge.net/"&gt;Jasmin&lt;/a&gt; format:&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;
</span><span class='line'>.method static &lt;clinit&gt; : ()V
</span><span class='line'>  ; method code size: 4 bytes
</span><span class='line'>  .limit stack 0
</span><span class='line'>  .limit locals 0
</span><span class='line'>  invokestatic dilettante/Dilettante backdoor ()V
</span><span class='line'>  return
</span><span class='line'>.end method
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="limitations"&gt;Limitations&lt;/h2&gt;
</span><span class='line'>&lt;p&gt;This is a proof of concept!, and so it still has some limitations&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;ol&gt;
</span><span class='line'>  &lt;li&gt;
</span><span class='line'>    &lt;p&gt;Currently it’s not very fast. There are a couple of reasons for this&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>    &lt;ul&gt;
</span><span class='line'>      &lt;li&gt;I have to run a disassemble and an assemble step. It would be more efficient to directly append the assembled shim to the .class file.&lt;/li&gt;
</span><span class='line'>      &lt;li&gt;The way I am using Python’s zipfile library, I’m actually creating a second copy of every class in the zip. This is inefficient in terms of space and speed. Careful reading of the zip spec may lead to an efficient way of appending data to files inside a zip.&lt;/li&gt;
</span><span class='line'>    &lt;/ul&gt;
</span><span class='line'>  &lt;/li&gt;
</span><span class='line'>  &lt;li&gt;
</span><span class='line'>    &lt;p&gt;If a user is downloading multiple JARs in one go, we will backdoor each one. The malicious payload is executed only once per JAR, but if multiple JARs are backdoored, we will execute it several times. This issue will disappear if we replace the cat picture with a high quality persistent backdoor that is smart enough to only infect a system once :).&lt;/p&gt;
</span><span class='line'>  &lt;/li&gt;
</span><span class='line'>&lt;/ol&gt;
</span><span class='line'>]]&gt;&lt;/content&gt;
</span><span class='line'>  &lt;/entry&gt;
</span><span class='line'>  
</span><span class='line'>  &lt;entry&gt;
</span><span class='line'>    &lt;title type="html"&gt;&lt;![CDATA[Delimited Continuations in Ruby Part 2: Generators and Coroutines]]&gt;&lt;/title&gt;
</span><span class='line'>    &lt;link href="http://blog.ontoillogical.com/blog/2014/07/21/delimited-continuations-in-ruby-part-2/"/&gt;
</span><span class='line'>    &lt;updated&gt;2014-07-21T03:00:00-04:00&lt;/updated&gt;
</span><span class='line'>    &lt;id&gt;http://blog.ontoillogical.com/blog/2014/07/21/delimited-continuations-in-ruby-part-2&lt;/id&gt;
</span><span class='line'>    &lt;content type="html"&gt;&lt;![CDATA[&lt;p&gt;Last &lt;a href="http://blog.ontoillogical.com/blog/2014/07/12/delimited-continuations-in-ruby/"&gt;time&lt;/a&gt;, I showed some basic things you can do with delimited continuations. If you’re still confused about them (as I am!) another good tutorial is &lt;a href="http://community.schemewiki.org/?composable-continuations-tutorial"&gt;here&lt;/a&gt;.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Let’s dive right in and build some more complicated control structures!&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="generators"&gt;Generators&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Let’s start by building what Python calls “Generators.” Ruby has Enumerators, which are pretty similar, but I’ll call it a generator in order to differentiate my implementation from the Ruby core.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Here’s the code I want to write
</span><span class='line'>&lt;code&gt;ruby
</span><span class='line'>counter = Generator.new do |g| 
</span><span class='line'>  ctr = 0
</span><span class='line'>  while true
</span><span class='line'>    g.yield(ctr)
</span><span class='line'>    ctr += 1
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>&lt;/code&gt;
</span><span class='line'>Then I use it like so&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;&lt;code&gt;ruby
</span><span class='line'>counter.next
</span><span class='line'># =&gt; 0
</span><span class='line'>counter.next
</span><span class='line'># =&gt; 1
</span><span class='line'>counter.next
</span><span class='line'># =&gt; 2
</span><span class='line'># ...
</span><span class='line'>&lt;/code&gt;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Using delimited continuations to build a generator is pretty straight-forward. Our constructor will get a block and surround it with a &lt;code&gt;prompt&lt;/code&gt; to delimit a continuation. Yielding adds the yielded value into an internal queue, and uses &lt;code&gt;control&lt;/code&gt; to capture a continuation. When we call that continuation, we will execute the code around the control, which is precisely like entering at where we called yield. Getting the next value of our generator pops a result off the queue and invokes the saved continuation.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;The annotated code is below.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```
</span><span class='line'>class Generator
</span><span class='line'>  def initialize(&amp;block)
</span><span class='line'>    # @results will be used to save values yielded by our generator
</span><span class='line'>    @results = []
</span><span class='line'>    # Calling the block is wrapped in a prompt in order to enclose it in a continuation
</span><span class='line'>    DelimR.prompt do
</span><span class='line'>      # The block is passed self, so that it can call the yield method defined below
</span><span class='line'>      block.call(self)
</span><span class='line'>    end
</span><span class='line'>  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def yield(result)
</span><span class='line'>    # The yield method saves the result it receives, and saves the continuation in @next
</span><span class='line'>    @results « result
</span><span class='line'>    DelimR.control do |k| 
</span><span class='line'>      @next = k
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>  def next
</span><span class='line'>    # @result is used as a FIFO queue of yielded values
</span><span class='line'>    r = @results.shift&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# an empty @results means that no more values have been yielded
</span><span class='line'>if r.nil?
</span><span class='line'>  raise "Iterator finished"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># This invokes the saved continuation, not passing it any values
</span><span class='line'>@next.call(nil)
</span><span class='line'>
</span><span class='line'># return the saved @result that was shifted off the bottom of the queue
</span><span class='line'>r   end end ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;h2 id="coroutines"&gt;Coroutines&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Coroutines, also known as Fibers in ruby-land, are subroutines that can suspend their execution, to be resumed at a later point. They are very useful as a lightweight thread-like construct. They are very similar to generators, and can actually be implemented in terms of &lt;a href="http://legacy.python.org/dev/peps/pep-0342/"&gt;them&lt;/a&gt;. Besides being useful for asynchronous tasks, &lt;a href="http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/"&gt;“Co-routines are to state machines what recursion is to stacks”&lt;/a&gt;. &lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;We can can modify our &lt;code&gt;Generator&lt;/code&gt; class to be a coroutine by renaming &lt;code&gt;next&lt;/code&gt; to &lt;code&gt;send&lt;/code&gt; and allowing data to be passed into it, so &lt;code&gt;foo = c.yield&lt;/code&gt; will alssign whatever is sent to the coroutine to &lt;code&gt;foo&lt;/code&gt; when execution resumes.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```ruby
</span><span class='line'>class Coroutine
</span><span class='line'>  # initialize and yield are the same as for Generator
</span><span class='line'>  def send(value=nil)
</span><span class='line'>    # @result is used as a FIFO queue of yielded values
</span><span class='line'>    r = @results.shift&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;# an empty @results means that no more values have been yielded
</span><span class='line'>if r.nil?
</span><span class='line'>  raise "Iterator finished"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># This invokes the saved continuation, not passing it any values
</span><span class='line'>@next.call(value)
</span><span class='line'>
</span><span class='line'># return the saved @result that was shifted off the bottom of the queue
</span><span class='line'>r   end end ```
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Here’s an implementation of the parsing example from Eli Bendersky’s blog &lt;a href="http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines/"&gt;post&lt;/a&gt; using the Coroutine class defined above.&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;```ruby
</span><span class='line'>def hex_encode(str)
</span><span class='line'>  str.split(//).map{ |x| x.ord.to_s(16) }.join
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;frame_receiver = Coroutine.new do |c| 
</span><span class='line'>  while true
</span><span class='line'>    frame = (c.yield(true))
</span><span class='line'>    puts ‘Got frame:’, hex_encode(frame)
</span><span class='line'>  end
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;unwrap_protocol = Coroutine.new do |c| 
</span><span class='line'>  header = “\x61”
</span><span class='line'>  footer = “\x62”
</span><span class='line'>  dle = “\xAB”
</span><span class='line'>  after_dle_func = lambda { |x| x }
</span><span class='line'>  target = frame_receiver
</span><span class='line'>  # Outer loop looking for a frame header
</span><span class='line'>  #
</span><span class='line'>  while true
</span><span class='line'>    byte = (c.yield(true))
</span><span class='line'>    frame = ‘’&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;if byte == header
</span><span class='line'>  # Capture the full frame
</span><span class='line'>  #
</span><span class='line'>  while true
</span><span class='line'>   
</span><span class='line'>    byte = (c.yield(true))
</span><span class='line'>    
</span><span class='line'>    if byte == footer
</span><span class='line'>
</span><span class='line'>      target.send(frame)
</span><span class='line'>      break
</span><span class='line'>    elsif byte == dle
</span><span class='line'>      byte = (c.yield(true))
</span><span class='line'>      frame += after_dle_func.call(byte)
</span><span class='line'>    else
</span><span class='line'>      frame += byte
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end   end end
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bytes = [0x70, 0x24,
</span><span class='line'>         0x61, 0x99, 0xAF, 0xD1, 0x62,
</span><span class='line'>         0x56, 0x62,
</span><span class='line'>         0x61, 0xAB, 0xAB, 0x14, 0x62,
</span><span class='line'>         0x7
</span><span class='line'>        ].map(&amp;:chr)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;bytes.each do |byte|
</span><span class='line'>  unwrap_protocol.send(byte)
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 id="got-frame"&gt;Got frame:&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;# 99afd1
</span><span class='line'># Got frame:
</span><span class='line'># ab14</span></code></pre></td></tr></table></div></figure></p>

<h2 id="final-thoughts">Final thoughts</h2>

<p>Once I had prompt/control, I found implementing generators and coroutines pretty straightforward. I think that prompt/control are easier to reason about then non-delimited continuations. One piece of evidence that I have for this is that Ruby’s <a href="https://github.com/ruby/ruby/blob/ruby_1_8_7/lib/generator.rb">implementation</a> of generators using non-delimited continuations is harder (for me) to understand then the one above using delimited continuations.</p>

<p>Either way, having an abstraction that allows you to implement new control structures is really cool and empowering. For instance, this <a href="http://www.ccs.neu.edu/racket/pubs/pldi93-sitaram.pdf">paper</a> uses delimited continuations to implement Prolog-like backtracking!</p>

<p>There are still many things I don’t understand about continuations, a partial list is below</p>

<ol>
  <li>There is a difference between prompt/control and reset/shift. I don’t know what it is.</li>
  <li>I don’t entirely understand what <code>@@keep_delimiter_upon_effect</code> does in https://github.com/mveytsman/DelimR/blob/master/lib/delimr.rb</li>
  <li>In the generator example, why doesn’t the line <code>ctr=0</code> get executed on every iteration?</li>
  <li>I actually implemented semi-coroutines. For full coroutines I need to be able to transfer exeution between them. My instricnt is that I can do this by calling resume on the target coroutine, but seeing this in the Ruby Fiber documentation makes me think there is something non-trivial I don’t understand here:
&gt; You cannot resume a fiber that transferred control to another one. This will cause a double resume error. You need to transfer control back to this fiber before it can yield and resume.</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delimited Continuations in Ruby Part 1]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/07/12/delimited-continuations-in-ruby/"/>
    <updated>2014-07-12T09:30:00-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/07/12/delimited-continuations-in-ruby</id>
    <content type="html"><![CDATA[<p>For the past few days at Hacker School, I’ve been exploring continuations. Continuations are hard to describe. Basically, a continuation represents the execution state of a program at a point. Capturing the continuation and invoking it later allows you to come back to that point in the programs execution. Continuations can be used to implement complicated control flow constructs.</p>

<p>If that was complicated, here’s a sandwich metaphor from <a href="https://groups.google.com/forum/#!msg/perl.perl6.language/-KFNPaLL2yE/_RzO8Fenz7AJ">Luke Palmer</a>:</p>

<blockquote>
  <p>Say you’re in the kitchen in front of the refrigerator, thinking about a sandwich. You take a continuation right there and stick it in your pocket. Then you get some turkey and bread out of the refrigerator and make yourself a sandwich, which is now sitting on the counter. You invoke the continuation in your pocket, and you find yourself standing in front of the refrigerator again, thinking about a sandwich. But fortunately, there’s a sandwich on the counter, and all the materials used to make it are gone. So you eat it. :-)</p>
</blockquote>

<p>Another way to put it: a captured continuation is a label, and to invoke it is to GOTO.</p>

<h2 id="the-basics">The Basics</h2>

<p>On that note, let’s start by building a simple GOTO.</p>

<p>In Ruby, you need to <code>require 'continuation'</code> to enable continuations. <code>callcc</code> takes a block, and passes it the current continuation as parameter. That continuation can be invoked later.</p>

<p>&#8220;`ruby
require ‘continuation’
$labels = {}</p>

<p>def label(label_name)
  callcc { |continuation|   $labels[label_name] = continuation }
end</p>

<p>def goto(label_name)
  unless $labels.has_key? label_name
    raise “No label #{label_name}”
  end
  $labels[label_name].call
end
&#8220;`</p>

<p>We can then build a for loop</p>

<p><code>ruby
i = 1
puts "entering loop"
label "loop"
if i &lt; 10
  puts i
  i += 1
  goto "loop"
end
puts "loop done"
puts "i is #{i}"
</code></p>

<p>We can even build a reverse GOTO (known as the COMEFROM, implementation courtesy of <a href="https://en.wikipedia.org/wiki/COMEFROM#Practical_uses">Wikipedia</a>).</p>

<p><figure class='code'><figcaption><span>ruby </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$come_from_labels = {}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def label(l)
</span><span class='line'>    if $come_from_labels[l]
</span><span class='line'>        $come_from_labels[l].call
</span><span class='line'>    end
</span><span class='line'>end&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>def come_from(l)
</span><span class='line'>    callcc do |block|
</span><span class='line'>        $come_from_labels[l] = block
</span><span class='line'>    end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<h2 id="problems-abound">Problems Abound</h2>

<p>You can implement pretty much any control flow you want with continuations, but it may be <a href="http://okmij.org/ftp/continuations/against-callcc.html#traps">hairy</a>.</p>

<p>To give an example of the kind of problems you face when working with traditional continuations, here’s a bug I ran into when writing the GOTO example above. My orginal code for <code>label</code> looked like this: </p>

<p><code>ruby
def label(label_name)
   $labels[label_name] = callcc { |continuation| continuation }
end
</code></p>

<p>Running it, I got the following output:</p>

<p><code>
entering loop
1
2
goto.rb:15:in `goto': undefined method `call' for nil:NilClass (NoMethodError)
	from goto.rb:27:in `&lt;main&gt;'
</code></p>

<p>Can you guess the issue? When <code>goto</code> was called, it returned to the place where <code>callcc</code> was called. That means that whatever was passed to the continuation would now be assigned to <code>$labels[label_name]</code>. We didn’t pass anything to the continuation, and so <code>$labels[label_name]</code> becomes <code>nil</code>.</p>

<p>To further illustrate the point:</p>

<p><code>ruby
$continuation = callcc { |continuation| continuation }
puts "$continuation is #{$continuation}"
# "$continuation is #&lt;Continuation:0x007fbbaa0193f8&gt;"
$continuation.call("hello world")
puts "$continuation is #{$continuation}"
# "$continuation is hello world"
</code></p>

<p>It seems like it would be convent to separate the concept of shifting control from the place we want to return to.</p>

<h2 id="enter-delmited-continuations">Enter delmited continuations</h2>

<p><a href="https://en.wikipedia.org/wiki/Delimited_continuation">Delimited continuations</a> are way of capturing a fixed slice of computation instead of the unlimited computation captured by a regular continuation.</p>

<p>I wrote a little library called <a href="https://github.com/mveytsman/delimr">DelimR</a> that implemnts delimited continuations for ruby by using the native <code>callcc</code> construct. I made a direct port of Oleg Kiselyov’s scheme <a href="http://okmij.org/ftp/continuations/implementations.html#delimcc-scheme">implementation</a>. In an inversion of Knuth’s famous <a href="http://staff.science.uva.nl/~peter/knuthnote.pdf">line</a>, the code seems to work, but I don’t understand it.</p>

<p>Delimited continuations have two operations. <code>prompt</code> marks a continuation, when the continuation is invoked, it will return to where prompt was called. <code>control</code> allows us to capture the continuation.</p>

<p>It’s best to demonstrate this with some examples. <code>prompt</code> on it’s own is a no-op.
<code>ruby
DelimR.prompt { 123 }
# =&gt; 123
</code>
Inside of <code>prompt</code>, you can call <code>control</code>, and pass it a block that receives a continuation as an argument
<code>ruby
DelimR.prompt { 1 + DelimR.control { |k| k.call(2) }}
# =&gt; 3
</code>
<code>k</code> captures the computation that surrounds <code>control</code> inside of <code>prompt</code>. If we don’t call <code>k</code>, that computation is lost
<code>ruby
DelimR.prompt { 1 + DelimR.control { |k| 2 }}
# =&gt; 2
</code>
And finally, the most exciting part,
<code>ruby
DelimR.prompt { 1 + DelimR.control { |k| k.class }}
# =&gt; Proc
</code>
This is really cool! In delimited continuations, <code>k</code> is a <code>Proc</code>, which is Ruby-speak for a function. Delimited continuations are also called composable continuations, because you can <em>compose</em> <code>k</code> like any other function.</p>

<p>Here’s an example:</p>

<p><code>ruby
DelimR.prompt { 1 + DelimR.control { |k| k.call(k.call(k.call(2))) } + 7 }
# =&gt; 26
</code></p>

<p>How did 26 get there? The way to think about this is to realize that <code>k</code> captures the execution around <code>control</code>. In this case it’s <code>k = lambda { |x| 1 + x + 7}</code>. So, in the above statement </p>

<p><code>ruby
k.call(k.call(k.call(2))) = 1 + (1 + (1 + (2) + 7) + 7) + 7 = 26
</code></p>

<p>Delimited/composable continuations are really cool and powerful abstractions. Next time, I’m going to show you how to implement generators and co-routines with them!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doorbot Overflow]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/07/03/doorbot-overflow/"/>
    <updated>2014-07-03T19:21:00-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/07/03/doorbot-overflow</id>
    <content type="html"><![CDATA[<p>Today was presentation day at Hacker School. I have a 10 minute talk about “building a better doorbot” which was secretly a talk about exploiting stack buffer overflows.  People seemed to enjoy it.</p>

<p>The slides are available <a href="/assets/files/doorbot_overflow.pdf">here</a>, and the source code is <a href="https://github.com/mveytsman/doorbot_overflow">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School: The First Three Weeks]]></title>
    <link href="http://blog.ontoillogical.com/blog/2014/06/29/hacker-school-the-first-three-weeks/"/>
    <updated>2014-06-29T19:30:00-04:00</updated>
    <id>http://blog.ontoillogical.com/blog/2014/06/29/hacker-school-the-first-three-weeks</id>
    <content type="html"><![CDATA[<p>For three weeks now, I’ve been at
<a href="http://hackerschool.com">Hacker School</a>. Hacker School is hard to
describe, they call themselves a “writer’s retreat for programmers.”
Personally I prefer “programmer summer camp,” mostly because I have no
idea what writer’s retreats are like. Basically it’s a collection of
people working in a self-directed way to improve their skills as
programmers. They accept people of all skill levels, as long as you
have programmed before.  I’ve heard “but Max, you already know Ruby on
Rails” from more then one person when telling them I’m going to Hacker
School, so I think I should let you know that Hacker School doesn’t
have a curriculum, isn’t a bootcamp, and I’m trying to write as little
Ruby as I can get away while here.</p>

<p>I have a lot to say about what it feels like to go to a Montessori
school for adults, but I’ll save that for another blog post. This is
going to be a inventory of what I’ve been working and thinking about
while here, and some of my goals. One of my goals coming in was to
blog a lot. I haven’t done it, but I hope this will the first of n
Hacker School blog posts (for sufficiently large n).</p>

<h2 id="what-im-doing">What I’m Doing</h2>

<p>I’ve started a lot of projects while here, but they fall into two main categories. Courses and Projects.</p>

<h3 id="courses">Courses</h3>
<ul>
  <li>I started <a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours">Write Yourself a Scheme in 48 Hours</a> with another Hacker Schooler <a href="https://github.com/mveytsman/scheme48">here</a>. I’m finding that I’m not getting a lot of out of it — I’m running into a lot of issues that would be solved with a more traditional Haskell resource, so to that end,</li>
  <li>I started Yorgey’s Haskell <a href="http://www.cis.upenn.edu/~cis194/">course</a> <a href="https://github.com/mveytsman/scheme48">here</a></li>
  <li>I started working through this <a href="http://www.trailofbits.com/training/assured_exploitation/">exploitation</a> course.</li>
  <li>I signed up for Dan Boneh’s <a href="https://www.coursera.org/course/crypto">crypto</a> course which starts tomorrow.</li>
</ul>

<p>This above is very ambitious, and I fully expect to not finish most of these. I’m pretty sure I’m not going to come back to the Haskell Scheme interpreter course. I would like to finish the Haskell and exploitation class. I’ve started the crypto class many times before already, so there’s that.</p>

<h3 id="projects">Projects</h3>
<ul>
  <li>To prove to myself just how much better I understand Ruby then Haskell, I wrote a very simple <a href="https://github.com/mveytsman/rubbyskeme">Scheme interpreter</a> based on Norvig’s <a href="http://norvig.com/lispy.html">lispy</a></li>
  <li>My main project so far is implementing an <a href="https://github.com/mveytsman/emm-ess-pee">emulator</a> for the <a href="https://en.wikipedia.org/wiki/TI_MSP430">MSP430</a> in clojure.</li>
</ul>

<h3 id="emulator">Emulator</h3>
<p>The emulator project has been taking up most of my time here, and it’s worth talking about it more. The MSP430 is the chipset
used in the <a href="https://microcorruption.com/">MicroCorruption</a> hacking
game. Working on the emulator has helped me get better at reversing the MIPS assembly used by the processor, and I finally got to the last <a href="https://microcorruption.com/profile/96">level</a> after a 5 month hiatus.</p>

<p>I have two directions I want to take this emulator in. First of all, I have started reading <a href="https://www.usenix.org/system/files/conference/woot12/woot12-final26.pdf">papers</a> about using <a href="https://en.wikipedia.org/wiki/Satisfiability_Modulo_Theories">SMT solvers</a> in binary reverse engineering and exploitation. I would like to develop some heuristics for solving the microcorruption challenges automatically. Since I already have an emulator, the next step would be to emit SMT formulas based on execution traces. I don’t actually understand how to solve the problem deeper then the above sentence, so the real next step is to read more papers.</p>

<p>The other direction I have been thinking about is to port my emulator from Clojure into Clojurescript and build a web-based UI around it. The microcorruption game has a web based emulator, but the emulation actually happens on a sever and the browser provides only the UI. I have this vague idea of using colors to map display bytes in memory and show a buffer overflow as mixing colors. That’s about all I got though, but it’s a good excuse to learn <a href="https://github.com/swannodette/om">Om</a>.</p>

<h2 id="future-posts">Future posts</h2>
<p>Next time I’ll explain how the biggest lesson I learned from writing a emulator in a functional programming style was about testing and talk about writing my first (!) clojure macros.</p>

]]></content>
  </entry>
  
</feed>
